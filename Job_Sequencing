#include <stdio.h>
#include <stdlib.h>

struct Job {
    int id;       // Job ID
    int deadline; // Job deadline
    int profit;   // Profit for the job
};

int compare(const void *a, const void *b) {
    struct Job *jobA = (struct Job *)a;
    struct Job *jobB = (struct Job *)b;
    return jobB->profit - jobA->profit;
}

int jobSequencing(struct Job jobs[], int n) {
    qsort(jobs, n, sizeof(struct Job), compare);
    int result[n];        // Result array to keep track of free time slots
    int jobSequence[n];   // Array to store the sequence of job IDs
    int maxProfit = 0;
    for (int i = 0; i < n; i++) {
        result[i] = -1;
    }
    for (int i = 0; i < n; i++) {
        for (int j = jobs[i].deadline - 1; j >= 0; j--) {
            if (j < n && result[j] == -1) {
                result[j] = i;                // Assign job to this slot
                jobSequence[j] = jobs[i].id;  // Store the job ID in sequence
                maxProfit += jobs[i].profit;  // Update maximum profit
                break;
            }
        }
    }
    printf("Scheduled Jobs (in order):\n");
    for (int i = 0; i < n; i++) {
        if (result[i] != -1) {
            printf("Job ID: %d, Profit: %d, Deadline: %d\n", 
                    jobs[result[i]].id, jobs[result[i]].profit, jobs[result[i]].deadline);
        }
    }

    return maxProfit;
}
int main() {
    struct Job jobs[] = {
        {1, 2, 6},
        {2, 1, 8},
        {3, 1, 5},
        {4, 2, 10}
    };
    int n = sizeof(jobs) / sizeof(jobs[0]);

    int maxProfit = jobSequencing(jobs, n);
    printf("Maximum Profit: %d\n", maxProfit);

    return 0;
}
