#include <bits/stdc++.h>
using namespace std;

void addEdge(vector<int> adj[], int u, int v)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
}

bool isCyclicConnected(vector<int> adj[], int s, int V, vector<bool>& visited){
    // Create a queue for BFS
    queue<int> q;
    // Enqueue the current node
    q.push(s);

    while (!q.empty()) {
        // Dequeue a vertex from queue and print it
        int v = q.front();
        q.pop();

        if (visited[v] == 1) {
            return true; // Cycle detected
        }

        visited[v] = 1; // Mark as visited

        // Visit adjacent nodes
        for (auto it : adj[v]) {
            if (visited[it] == 0) {
                q.push(it);
            }
        }
    }
    return false;
}

bool isCyclicDisconnected(vector<int> adj[], int V){
    // Mark all the vertices as not visited
    vector<bool> visited(V, false);

    for (int i = 0; i < V; i++) {
        if (!visited[i]
            && isCyclicConnected(adj, i, V, visited))
            return true;
    }
    return false;
}
int main(){
    int V = 4;
    vector<int> adj[V];
    addEdge(adj, 0, 1);
    addEdge(adj, 1, 2);
    addEdge(adj, 2, 0);
    addEdge(adj, 2, 3);

    if (isCyclicDisconnected(adj, V))
        cout << "Yes";
    else
        cout << "No";

    return 0;
}
