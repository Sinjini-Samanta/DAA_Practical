#include <stdio.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node* left;
    struct Node* right;
};
struct Node* newNode(int data)
{
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
    return node;
}
struct Node* insert(struct Node* node,int data)
{
    if(node==NULL)
        return newNode(data);
    if(data < node->data)
        node->left = insert(node->left,data);
    else if(data > node->data)
        node->right = insert(node->right,data);
    return node;
}
void inorderTraversal(struct Node* root)
{
    if(root!=NULL)
    {
        inorderTraversal(root->left);
        printf("%d ",root->data);
        inorderTraversal(root->right);
    }
}
int main()
{
    int n,i;
    struct Node* root = NULL;
    printf("enter the size of array:");
    scanf("%d",&n);
    if(n<=0)
    {
        printf("the size of the array must be positive\n");
        return 1;
    }
    int *values=(int *)malloc(n*sizeof(int));
    if(values==NULL)
    {
        printf("memory allocation failed");
        return 1;
    }
    printf("enter the array element:\n");
    for(int i=0;i<n;i++)
        scanf("%d",&values[i]);
    for(i=0;i<n;i++)
        root=insert(root,values[i]);
    printf("the inorder traversal of the array elements is:\n");
    inorderTraversal(root);
    printf("\n");
}
